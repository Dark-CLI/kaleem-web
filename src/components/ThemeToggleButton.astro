---
// No props needed for this component
---
<div class="theme-toggle">
  <button id="theme-toggle-button">
    <span class="sr-only">Toggle theme</span>
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-sun"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-moon"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>
  </button>
</div>

<style>
  .theme-toggle {
    display: flex;
    align-items: center;
  }

  #theme-toggle-button {
    background: none;
    border: 1px solid var(--header-text);
    cursor: pointer;
    padding: 0.5em 1em;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--header-text);
  }

  #theme-toggle-button:hover {
    background-color: rgba(128, 128, 128, 0.1);
  }

  .icon {
    width: 1.1rem;
    height: 1.1rem;
  }

  /* Hide moon by default */
  html[data-theme='light'] .icon-moon {
    display: none;
  }

  /* Hide sun in dark mode */
  html[data-theme='dark'] .icon-sun {
    display: none;
  }
</style>

<script is:inline>
  const getTheme = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  };

  const setTheme = (theme) => {
    document.documentElement.setAttribute('data-theme', theme);
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem('theme', theme);
    }
  };

  // Set theme on initial load
  const initialTheme = getTheme();
  setTheme(initialTheme);

  // Add event listener to the button
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('theme-toggle-button');
    if (button) {
      button.addEventListener('click', () => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        setTheme(newTheme);
      });
    }
  });
</script>
